
function debounce(fn, wait=400) {
  let t; return (...args) => { clearTimeout(t); t = setTimeout(() => fn(...args), wait); };
}
const upsertPlayerCloudDebounced = debounce(upsertPlayerCloud, 500);
    

// Defaults: Firebase + Game Code
const DEFAULT_FB_CONFIG = {
  apiKey: "AIzaSyCaUvTFms4R8ufS4jxXw0M0AtAQ763RlMc",
  authDomain: "andystag25.firebaseapp.com",
  projectId: "andystag25",
  storageBucket: "andystag25.firebasestorage.app",
  messagingSenderId: "43167349544",
  appId: "1:43167349544:web:f3ec01160a0166fc2a6e1d",
  measurementId: "G-LJ54DX0R9Q"
};
const DEFAULT_GAME_CODE = 'andystag25';
const DEFAULT_VAPID_KEY = ''; // Add your Firebase VAPID key here
function ensureCloudDefaults(){ try{ if(!localStorage.getItem('fbConfig')) localStorage.setItem('fbConfig', JSON.stringify(DEFAULT_FB_CONFIG)); if(!localStorage.getItem('gameCode')) localStorage.setItem('gameCode', DEFAULT_GAME_CODE); }catch(e){} }

function setFloating(a){}
// Name & ownership
function djb2(str){ let h=5381; for(let i=0;i<str.length;i++){ h=((h<<5)+h)+str.charCodeAt(i); h|=0; } return h>>>0; }
function computeAssignedCard(name){ const seed=localStorage.getItem('seed')||'123456'; const val=djb2((name||'').trim().toLowerCase()+':'+seed); return (val%NUM_CARDS); }
function ensureOwners(){ if(!localStorage.getItem('cardOwners')) localStorage.setItem('cardOwners','{}'); }
function ensurePlayer(){ const name=localStorage.getItem('playerName'); if(!name){ const pm=document.getElementById('playerModal'); if(pm) pm.classList.add('show'); return false; } // v16: defensive hide
 const pm=document.getElementById('playerModal'); if(pm){ pm.classList.remove('show'); pm.style.display='none'; } return true; }
function claimCard(){ const inp=document.getElementById('playerNameInput'); const name=(inp.value||'').trim(); if(!name){ toast('Pop your name in first'); return; } const idx=computeAssignedCard(name); localStorage.setItem('playerName',name); localStorage.setItem('assignedCard', String(idx)); const owners=JSON.parse(localStorage.getItem('cardOwners')||'{}'); owners[idx]=name; localStorage.setItem('cardOwners', JSON.stringify(owners)); const pm=document.getElementById('playerModal'); if(pm){ pm.classList.remove('show'); pm.style.display='none'; } toast(`Welcome {name}! You’re Card {idx+1}`);

  if (window.cloudReady && firebase?.auth()?.currentUser) {
    const uid = firebase.auth().currentUser.uid;
    const ref = db.collection('games').doc(gameCode).collection('players').doc(String(idx));
    ref.set({ ownerUid: uid }, { merge: false }).catch(()=>{/* already exists */})
      .finally(()=> ref.set({ name, cardIndex: idx, completed: getCompletedCount() }, { merge: true }));
  }
     renderCard(idx); window.currentCardIndex=idx; updatePlayerHeader(); renderScoreboard(); upsertPlayerCloudDebounced(name, idx, getCompletedCount()); }

// Cloud sync
window.cloudReady=false; window.db=null; window.gameCode=null;
async function initCloud(){ try{ const cfg=JSON.parse(localStorage.getItem('fbConfig')||'{}'); const code=localStorage.getItem('gameCode')||''; if(!cfg.apiKey||!cfg.projectId||!cfg.appId||!code||typeof firebase==='undefined'){ window.cloudReady=false; return; } if(!firebase.apps.length){ firebase.initializeApp(cfg); } await firebase.auth().signInAnonymously(); window.db=firebase.firestore(); window.gameCode=code; window.cloudReady=true; subscribeScoreboard(); subscribeTimer(); subscribeWinner(); subscribeEvents(); }catch(e){ console.error(e); window.cloudReady=false; } }
function subscribeScoreboard(){ if(!window.cloudReady) return; const ref=db.collection('games').doc(gameCode).collection('players'); ref.onSnapshot(snap=>{ const owners=JSON.parse(localStorage.getItem('cardOwners')||'{}'); const list=[]; snap.forEach(doc=>{ const d=doc.data(); if(typeof d.cardIndex==='number'&&d.name){ owners[d.cardIndex]=d.name; list.push({name:d.name, cardIndex:d.cardIndex, completed:d.completed||0}); } }); window.playersCache=list; localStorage.setItem('cardOwners', JSON.stringify(owners)); renderScoreboard(); const idx=window.currentCardIndex||0; const label=owners[idx]?owners[idx]:`Player ${idx+1}`; const t=document.getElementById('cardTitle'); if(t) t.innerHTML=`<span class="title-white title-title">Bingo Card ${idx+1}/${NUM_CARDS} : </span><span class="title-green title-user">${label}</span>`; }); }
function upsertPlayerCloud(name, idx, completed){ try{ if(!window.cloudReady) return; return db.collection('games').doc(gameCode).collection('players').doc(String(idx)).set({ name, cardIndex:idx, completed, updatedAt: firebase.firestore.FieldValue.serverTimestamp() }, { merge:true }); }catch(e){ console.error(e); }}
async function resetGameAll(){ if(!confirm('Reset the entire game for everyone?')) return; try{ if(window.cloudReady){ const col=db.collection('games').doc(gameCode).collection('players'); const snap=await col.get(); const batch=db.batch(); snap.docs.forEach(d=>batch.delete(d.ref)); await batch.commit(); const tref=db.collection('games').doc(gameCode).collection('meta').doc('timer'); await tref.delete().catch(()=>{}); const wref=db.collection('games').doc(gameCode).collection('meta').doc('winner'); await wref.delete().catch(()=>{}); } }catch(e){ console.error(e);} localStorage.removeItem('playerName'); localStorage.removeItem('assignedCard'); localStorage.removeItem('cardOwners'); document.body.classList.remove('locked-red'); renderCard(0); window.currentCardIndex=0; renderScoreboard(); const pm=document.getElementById('playerModal'); if(pm){ pm.classList.add('show'); pm.style.display='flex'; } toast('Game reset. New players, claim your cards.'); }

// --- Events & Notifications ---
function emitTaskCompleted(task){ try{ if(!window.cloudReady) return; const name=localStorage.getItem('playerName')||'Someone'; const idx=parseInt(localStorage.getItem('assignedCard')||'-1'); const ref=db.collection('games').doc(gameCode).collection('events'); ref.add({ type:'task_completed', playerName:name, cardIndex: idx, task: task, createdAt: firebase.firestore.FieldValue.serverTimestamp() }); }catch(e){ console.error(e); } }
let evUnsub=null; function subscribeEvents(){ try{ if(!window.cloudReady) return; const ref=db.collection('games').doc(gameCode).collection('events').orderBy('createdAt','desc').limit(20); if(evUnsub) evUnsub(); evUnsub = ref.onSnapshot(snap=>{ snap.docChanges().forEach(ch=>{ if(ch.type!=='added') return; const d=ch.doc.data(); if(d.type==='task_completed'){ const who = d.playerName||`Player ${(d.cardIndex||0)+1}`; const msg = `${who} completed "${d.task||''}"`; showBanner(msg, 'linear-gradient(90deg,#101317,#374151)'); notifyLocal(msg); } }); }); }catch(e){ console.error(e);} }
function notifyLocal(body){ if(!('Notification' in window)) return; if(Notification.permission==='granted'){ try{ new Notification('Andy\'s Stag Bingo', { body, icon:'icon-192.png' }); }catch(e){} } }
let messaging=null; try{ messaging=firebase.messaging(); }catch(e){}
async function enablePush(){ try{ if(!('Notification' in window)) { toast('Notifications not supported'); return; } const res = await Notification.requestPermission(); if(res!=='granted'){ toast('Notifications denied'); return; } if(!messaging){ toast('Push not available'); return; } const token = await messaging.getToken(); if(!token){ toast('No token'); return; } const idx = parseInt(localStorage.getItem('assignedCard')||'-1'); if(window.cloudReady && idx>=0){ await db.collection('games').doc(gameCode).collection('players').doc(String(idx)).set({ fcmToken: token }, { merge:true }); } toast('Notifications enabled'); } catch(e){ console.error(e); toast('Notifications error'); } }

// --- Winner Sync & Visuals ---
window.winnerIndex = null; window.winnerName=null; let wUnsub=null;
function announceWinner(idx, name){ try{ if(!window.cloudReady) return; const ref=db.collection('games').doc(gameCode).collection('meta').doc('winner'); return ref.set({ winnerIndex: idx, winnerName: name, epoch: Date.now() }, { merge: true }); }catch(e){ console.error(e);} }
function subscribeWinner(){ if(!cloudReady) return; const ref=db.collection('games').doc(gameCode).collection('meta').doc('winner'); if(wUnsub) wUnsub(); wUnsub = ref.onSnapshot(doc=>{ const d=doc.data(); if(!d || typeof d.winnerIndex!=='number') return; window.winnerIndex=d.winnerIndex; window.winnerName=d.winnerName||`Player ${d.winnerIndex+1}`; applyWinnerVisuals(); showBanner(`BINGO! — ${window.winnerName} on Card ${d.winnerIndex+1}`, 'linear-gradient(90deg,#0F3D2E,#2BB673)'); setTimeout(()=>{ const myIdx=parseInt(localStorage.getItem('assignedCard')||'-1'); if(myIdx!==d.winnerIndex){ showBanner('Losers: tap to reveal your forfeit below','linear-gradient(90deg,#3a0a0a,#DE3E24)'); const det=document.querySelector('#bingo details'); if(det) det.open=true; } }, 1200); }); }
function applyWinnerVisuals(){ try{ const host=document.getElementById('bingoGrid'); if(!host) return; const n = window.currentCardIndex||0; host.classList.remove('winner-card','loser-card'); if(window.winnerIndex==null) return; if(n===window.winnerIndex){ host.classList.add('winner-card'); document.body.classList.remove('locked-red'); } else { host.classList.add('loser-card'); document.body.classList.add('locked-red'); } }catch(e){ console.error(e);} }

// --- Timer (cloud + mirror) ---
let tUnsub=null; function subscribeTimer(){ if(!cloudReady) return; const ref=db.collection('games').doc(gameCode).collection('meta').doc('timer'); if(tUnsub) tUnsub(); tUnsub=ref.onSnapshot(doc=>{ const d=doc.data()||{}; applyTimerState(d); }); }
function showRoundBarImmediate(rem){ const bar=document.getElementById('roundBar'); const tm=document.getElementById('roundTime'); if(bar&&tm){ bar.style.display='flex'; tm.textContent=fmt(rem); } }
let lastTimerState=null, mirrorInt=null; function startTimerMirror(){ if(mirrorInt) return; mirrorInt=setInterval(()=>{ if(!lastTimerState) return; const rem=computeRemaining(lastTimerState); updateTimerDisplays(rem); },1000);} function stopTimerMirror(){ if(mirrorInt){ clearInterval(mirrorInt); mirrorInt=null; }}
function computeRemaining(d){ if(!d) return 0; let rem=d.remaining||0; if(d.running && d.epochStart){ const elapsed=Math.floor((Date.now()-d.epochStart)/1000); rem=Math.max(0, rem-elapsed); } return rem; }
function updateTimerDisplays(rem){ const tm=document.getElementById('roundTime'); if(tm) tm.textContent=fmt(rem); const big=document.getElementById('time'); if(big) big.textContent=fmt(rem); }
function applyTimerState(d){ try{ const bar=document.getElementById('roundBar'); const tm=document.getElementById('roundTime'); const msg=document.getElementById('roundMsg'); if(!bar||!tm||!msg) return; if(!d||d.remaining==null){ bar.style.display='none'; stopTimerMirror(); lastTimerState=null; return; } bar.style.display='flex'; lastTimerState=d; const rem=computeRemaining(d); updateTimerDisplays(rem); startTimerMirror(); if(rem===15*60) showBanner('Half time!', 'linear-gradient(90deg,#1f2937,#374151)'); if(rem===5*60) showBanner('5 minutes left!', 'linear-gradient(90deg,#1f2937,#374151)'); if(rem===0) showBanner('Time! Show your Bingos.', 'linear-gradient(90deg,#DE3E24,#E91E63)'); }catch(e){ console.error(e); } }
async function writeTimerState(partial){ if(!cloudReady) return; const ref=db.collection('games').doc(gameCode).collection('meta').doc('timer'); return ref.set(partial, { merge:true }); }

// Card + board
const CHALLENGES=["Get a friendly stranger to teach Andy their hometown toast (with consent).","Start a spontaneous high-five chain across the bar (aim for 3+).","Take a selfie with a bartender (ask first and tag the pub).","Slip the word ‘badger’ naturally into a convo without being clocked.","Convince someone you’re a minor celebrity (bonus if they guess who).","Recruit a stranger to sing one line of a song with you.","Trade hats with someone for 60 seconds (ask nicely).","Find someone from outside Ireland and get their best travel tip.","Get a stranger to pick a new nickname for Andy.","Find a Kildare local and get them to shout ‘Up the Lilywhites!’ with Andy.","Teach a table a 5‑second team chant for Andy.","Photo with a dog (owner’s permission & treat bribe encouraged).","Get a couple to give Andy marriage advice in 10 words.","Ask the bar to play a song for Andy (polite request).","Find someone with the same first name as Andy and snap a pic.","Convince a stranger to do your go‑to dance move with you.","Get a group ‘wave’ going across two tables.","Ask someone for their most random pub fact and record it.","Swap a coaster with another table (friendly trade).","Teach someone your best impersonation; get them to rate it.","Find a person wearing sports merch and get their bold season prediction.","Ask the bar team for their favourite mocktail and order one for Andy.","Get a stranger to draw a doodle of Andy on a napkin.","Run a 3‑question ‘How well do you know Andy?’ quiz.","Photo of Andy pulling his most iconic school‑days face.","Challenge another table to a paper aeroplane throw (no litter!).","Get a stranger to recommend a local late‑night food spot.","Pose Andy with a prop from the pub (with permission).","Find someone who shares Andy’s birthday month and take a selfie.","Ask three people for one‑word advice for married life; read to Andy.","Convince a stranger to introduce Andy to the whole bar.","Get a bar team member to teach Andy a pour (mock glass).","Find someone taller than Andy; recreate a movie poster pose.","Start a slow‑motion walk video with your crew across the pub.","Secret word: say ‘hippopotamus’ casually in chat.","Ask a stranger for their favourite toast in their native language.","Get a hug for Andy (only if offered—consent first).","Find a left‑handed person and do a lefty handshake selfie.","Start a 10‑second silent dance‑off—no music.","Ask a bartender for the pub’s oldest fun tradition.","Teach someone ‘Sláinte!’ and clink.","Get a stranger to give Andy a new wedding hashtag.","Ask a random table to choose Andy’s next bingo square.","Convince someone to swap seats for one round (their choice).","Ask the bar to vote: socks with sandals—yes/no?","Ask someone to guess Andy’s job from one clue.","Recreate a classic album cover with strangers.","Get a stranger to attempt your accent for 5 seconds.","Find another stag/hen & take a joint pic.","Ask someone the best advice they ever got from a grandparent.","Get a bartender’s signature on Andy’s bingo card.","Teach Andy a two‑step dance with a stranger.","Find a person born in the same year as Andy and cheers.","Start a conga line of at least five steps.","Spell A‑N‑D‑Y with three strangers in a photo.","Kind roast: one‑line gentle roast for Andy.","Guess Andy’s favourite takeaway—reveal later.","Photo with the pub’s funniest sign or decor.","Recommend a favourite zero‑alcohol drink.","Swap sunglasses for a 10‑sec photo (with permission).","Ask the bar for a toast in honour of Athy.","Arm‑wrestle pose with bartender (no wrestling!).","Find a musician & request a 5‑sec riff (if appropriate).","Pick a wildcard—then reveal it!","Cheers with someone named after a colour.","Best hangover cure (PG only).","Find same shoe size—evidence pic only.","Group selfie with another table—new friends unlocked.","Learn a new handshake from a stranger.","Pose a bartender with a bar tool of their choice.","One‑song karaoke recommendation.","Introduce Andy as a ‘local legend’." ];
const NUM_CARDS=16,SIZE=5; function shuffle(a){for(let i=a.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[a[i],a[j]]=[a[j],a[i]]}return a}
function mulberry32(a){return function(){var t=a+=0x6D2B79F5;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return((t^t>>>14)>>>0)/4294967296}}
function genCard(seed){const rng=mulberry32(seed);const pool=CHALLENGES.map((c,i)=>({c,i}));for(let i=pool.length-1;i>0;i--){const j=Math.floor(rng()*(i+1));[pool[i],pool[j]]=[pool[j],pool[i]]}const tiles=pool.slice(0,SIZE*SIZE-5).map(x=>x.c);const wilds=shuffle(["WILDCARD: Your Choice – pick any uncompleted square.","WILDCARD: Andy Names It – Andy picks your square.","WILDCARD: Swap! – trade one square with another player.","WILDCARD: Double Trouble – two mini‑tasks for 1 square.","WILDCARD: Photo Proof – any photo incl. Andy earns this square.","WILDCARD: Crowd Call – the bar chooses your task.","WILDCARD: Fast Track – 60‑sec speed run on any task.","WILDCARD: Assist – help another player complete a task."]).slice(0,4);const grid=[];let t=0,w=0;for(let r=0;r<SIZE;r++){for(let c=0;c<SIZE;c++){if(r===2&&c===2){grid.push({text:"ANDY FREE",type:"andy"});continue}if(w<4&&((r+c)%3===0)&&!(r===2&&c===2)){grid.push({text:wilds[w++],type:"wild"})}else{grid.push({text:tiles[t++],type:"task"})}}}return grid}
function cardToHTML(grid){const wrap=document.createElement('div');wrap.className='grid cols-5';grid.forEach((g)=>{const d=document.createElement('div');d.className='tile '+(g.type==='wild'?'wild':(g.type==='andy'?'andy':''));d.innerHTML=`<span>${g.text}</span>`+(g.type==='wild'?`<span class=\"badge\">wild</span>`:'');d.addEventListener('click',()=>{if(typeof window.currentCardIndex==='number'){const assigned=parseInt(localStorage.getItem('assignedCard')||'-1');if(window.currentCardIndex!==assigned){ toast(`View only. Your card is ${assigned>=0?('#'+(assigned+1)):'not claimed yet'}.`); return; }} else { toast('Claim your card first'); return; } const wasDone=d.classList.contains('done'); d.classList.toggle('done'); d.style.background=d.classList.contains('done')?'#0f3d2e':'#1c2027'; maybeBingo(); bumpCompleted(); if(!wasDone && d.classList.contains('done')){ emitTaskCompleted(g.text); } });wrap.appendChild(d)});return wrap}
function renderCard(n){const seed=(parseInt(localStorage.getItem('seed')||'123456')+n*97)>>>0;const grid=genCard(seed);const host=document.getElementById('bingoGrid');host.innerHTML='';host.appendChild(cardToHTML(grid)); if(window.winnerIndex!=null){ host.classList.toggle('winner-card', n===window.winnerIndex); host.classList.toggle('loser-card', n!==window.winnerIndex); } const owners=JSON.parse(localStorage.getItem('cardOwners')||'{}'); const label=owners[n]?owners[n]:`Player ${n+1}`; const tt=document.getElementById('cardTitle'); if(tt) tt.innerHTML=`<span class=\"title-white title-title\">Bingo Card ${n+1}/${NUM_CARDS} : </span><span class=\"title-green title-user\">${label}</span>`; updatePlayerHeader(); renderScoreboard();}
function maybeBingo(){const tiles=Array.from(document.querySelectorAll('#bingoGrid .tile'));const g=[];for(let i=0;i<SIZE*SIZE;i++)g.push(tiles[i].classList.contains('done'));const row=r=>[0,1,2,3,4].every(c=>g[r*5+c]);const col=c=>[0,1,2,3,4].every(r=>g[r*5+c]);const d1=[0,6,12,18,24].every(i=>g[i]);const d2=[4,8,12,16,20].every(i=>g[i]);if([0,1,2,3,4].some(row)||[0,1,2,3,4].some(col)||d1||d2){ const owners=JSON.parse(localStorage.getItem('cardOwners')||'{}'); const winnerName=owners[window.currentCardIndex]?owners[window.currentCardIndex]:`Player ${window.currentCardIndex+1}`; announceWinner(window.currentCardIndex, winnerName); window.winnerIndex=window.currentCardIndex; window.winnerName=winnerName; applyWinnerVisuals(); } }
function updatePlayerHeader(){ const name=localStorage.getItem('playerName')||''; const assigned=parseInt(localStorage.getItem('assignedCard')||'-1'); const el=document.getElementById('playerHeader'); if(el){ el.innerHTML=(name&&assigned>=0)?`<span class=\"sub-accent\"><em>${name}, you have claimed - Card #${assigned+1}</em></span>`:''; } }
function getCompletedCount(){ const tiles=Array.from(document.querySelectorAll('#bingoGrid .tile')); let count=0; tiles.forEach(t=>{ if(t.classList.contains('done')){ const txt=t.textContent.trim(); if(txt!=='ANDY FREE') count++; } }); return count; }
function renderScoreboard(){ const body=document.getElementById('scoreBody'); if(!body) return; body.innerHTML=''; if(window.playersCache&&window.playersCache.length){ const rows=[...window.playersCache].sort((a,b)=>(b.completed||0)-(a.completed||0)); rows.forEach(r=>{ const tr=document.createElement('tr'); const td1=document.createElement('td'); td1.style.padding='6px'; td1.textContent=r.name; const td2=document.createElement('td'); td2.style.padding='6px'; td2.textContent=(r.cardIndex+1).toString(); const td3=document.createElement('td'); td3.style.padding='6px'; td3.textContent=(r.completed||0); tr.appendChild(td1); tr.appendChild(td2); tr.appendChild(td3); body.appendChild(tr); }); return; }
 const name=localStorage.getItem('playerName')||''; const assigned=parseInt(localStorage.getItem('assignedCard')||'-1'); if(name&&assigned>=0){ const tr=document.createElement('tr'); const td1=document.createElement('td'); td1.style.padding='6px'; td1.textContent=name; const td2=document.createElement('td'); td2.style.padding='6px'; td2.textContent=(assigned+1).toString(); const td3=document.createElement('td'); td3.style.padding='6px'; td3.id='completedCell'; td3.textContent=getCompletedCount(); tr.appendChild(td1); tr.appendChild(td2); tr.appendChild(td3); body.appendChild(tr);} }
function bumpCompleted(){ const c=document.getElementById('completedCell'); if(c) c.textContent=getCompletedCount(); const name=localStorage.getItem('playerName')||''; const idx=parseInt(localStorage.getItem('assignedCard')||'-1'); if(idx>=0&&name) upsertPlayerCloudDebounced(name, idx, getCompletedCount()); }

// Timer control fns used by Admin
let timerInt=null, remaining=30*60; function fmt(s){ const m=Math.floor(s/60).toString().padStart(2,'0'); const sec=(s%60).toString().padStart(2,'0'); return `${m}:${sec}`; }
function startTimer(){ if(timerInt) return; toast('Round started'); writeTimerState({running:true, epochStart:Date.now(), remaining:remaining}); showRoundBarImmediate(remaining); lastTimerState={running:true, epochStart:Date.now(), remaining:remaining}; startTimerMirror(); timerInt=setInterval(()=>{ remaining--; const tEl=document.getElementById('time'); if(tEl) tEl.textContent=fmt(remaining); if(remaining<=0){ clearInterval(timerInt); timerInt=null; writeTimerState({running:false, remaining:0}); stopTimerMirror(); lastTimerState={running:false, remaining:0, epochStart:null}; toast('Time!'); remaining=0; } },1000); }
function pauseTimer(){ if(timerInt){ clearInterval(timerInt); timerInt=null; writeTimerState({running:false, remaining:remaining}); lastTimerState={running:false, remaining:remaining, epochStart:null}; stopTimerMirror(); toast('Paused'); } }
function resetTimer(){ clearInterval(timerInt); timerInt=null; remaining=30*60; const tEl=document.getElementById('time'); if(tEl) tEl.textContent=fmt(remaining); writeTimerState({running:false, remaining:remaining, epochStart:null}); lastTimerState={running:false, remaining:remaining, epochStart:null}; stopTimerMirror(); toast('Timer reset'); }

// Admin gate
const ADMIN_USER='mickschofield@gmail.com';
const ADMIN_PASS='@ndyst@g25pw';
function isAdmin(){ try{return sessionStorage.getItem('admin')==='1';}catch(e){return false;} }
function showAdmin(){ const gate=document.getElementById('adminGate'); const ctr=document.getElementById('adminControls'); if(!gate||!ctr) return; if(isAdmin()){ gate.style.display='none'; ctr.style.display='block'; } else { gate.style.display='block'; ctr.style.display='none'; } }
function adminLogin(){ const u=document.getElementById('adminUser').value.trim(); const p=document.getElementById('adminPass').value; if(u===ADMIN_USER && p===ADMIN_PASS){ try{ sessionStorage.setItem('admin','1'); }catch(e){} toast('Admin unlocked'); showAdmin(); } else { toast('Invalid admin credentials'); } }
function adminLogout(){ try{ sessionStorage.removeItem('admin'); }catch(e){} showAdmin(); }
function wireAdmin(){ const lb=document.getElementById('adminLoginBtn'); if(lb) lb.onclick=adminLogin; const lo=document.getElementById('adminLogoutBtn'); if(lo) lo.onclick=adminLogout; const st=document.getElementById('adminStart'); if(st) st.onclick=()=>startTimer(); const pa=document.getElementById('adminPause'); if(pa) pa.onclick=()=>pauseTimer(); const rs=document.getElementById('adminReset'); if(rs) rs.onclick=()=>resetTimer(); const rg=document.getElementById('adminResetGame'); if(rg) rg.onclick=()=>resetGameAll(); const im=document.getElementById('btnImportCsv'); if(im) im.onclick=adminImportCsv; const ex=document.getElementById('btnExportCsv'); if(ex) ex.onclick=adminExportCsv; const ep=document.getElementById('btnEnablePush'); if(ep) ep.onclick=enablePush; showAdmin(); }

// CSV import/export
async function adminImportCsv(){ try{ const ta=document.getElementById('csvArea'); if(!ta){ toast('No CSV'); return; } const txt=ta.value.trim(); if(!txt){ toast('Paste CSV first'); return; } const lines=txt.split(/\r?\n/); const updates=[]; for(const line of lines){ const parts=line.split(',').map(s=>s.trim()); if(parts.length<3) continue; const card=parseInt(parts[0],10); if(!(card>=1 && card<=NUM_CARDS)) continue; const name=parts[1]; const phone=parts[2]; const idx=card-1; updates.push(db.collection('games').doc(gameCode).collection('players').doc(String(idx)).set({ name, phone, cardIndex: idx }, { merge:true })); }
 await Promise.all(updates); toast('Imported phone(s)'); }catch(e){ console.error(e); toast('Import error'); } }
async function adminExportCsv(){ try{ const snap=await db.collection('games').doc(gameCode).collection('players').get(); const rows=[]; snap.forEach(doc=>{ const d=doc.data(); rows.push(`${(d.cardIndex||0)+1},${d.name||''},${d.phone||''}`); }); const blob=new Blob([rows.join('\n')],{type:'text/csv'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='players.csv'; a.click(); URL.revokeObjectURL(url); }catch(e){ console.error(e); toast('Export error'); } }

// Helpers & init
function openNav(lat,lon,label){const isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent);if(isIOS){window.open(`maps://?daddr=${lat},${lon}&q=${encodeURIComponent(label)}`,'_blank')}else{window.open(`https://www.google.com/maps/dir/?api=1&destination=${lat}%2C${lon}&travelmode=driving`,'_blank')}}
function toast(msg){const t=document.getElementById('toast'); t.textContent=msg; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'),2200)}
function tickAlert(msg){ toast(msg); }
function init(){ document.querySelectorAll('[data-tab]').forEach(btn=>{ btn.addEventListener('click',()=>{ document.querySelectorAll('.nav button').forEach(b=>b.classList.remove('active')); btn.classList.add('active'); document.querySelectorAll('main section').forEach(s=>s.classList.remove('active')); document.getElementById(btn.dataset.tab).classList.add('active'); }); }); const url=new URL(location.href); const seed=url.searchParams.get('seed')||Math.floor(Math.random()*1e9).toString(); localStorage.setItem('seed',seed); ensureOwners(); ensureCloudDefaults(); initCloud(); if(!ensurePlayer()){ return; } let idx=parseInt(url.searchParams.get('card')||'1')-1; if(idx<0||idx>=NUM_CARDS) idx=0; renderCard(idx); window.currentCardIndex=idx; document.getElementById('prevCard').onclick=()=>{ idx=(idx-1+NUM_CARDS)%NUM_CARDS; renderCard(idx); window.currentCardIndex=idx; }; document.getElementById('nextCard').onclick=()=>{ idx=(idx+1)%NUM_CARDS; renderCard(idx); window.currentCardIndex=idx; }; renderScoreboard(); const tEl=document.getElementById('time'); if(tEl) tEl.textContent=fmt(remaining); if('serviceWorker' in navigator){ navigator.serviceWorker.register('sw.js'); navigator.serviceWorker.register('firebase-messaging-sw.js'); } }
window.addEventListener('load',()=>{ wireAdmin(); init(); });

// v16: ESC closes modal if visible
window.addEventListener('keydown', (e)=>{ if(e.key==='Escape'){ const pm=document.getElementById('playerModal'); if(pm){ pm.classList.remove('show'); pm.style.display='none'; } } });


let deferredPrompt = null;
window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;
  const btn = document.getElementById('installBtn');
  if (btn) btn.style.display = 'inline-flex';
});
async function promptInstall() {
  if (!deferredPrompt) { toast('Install not available yet'); return; }
  deferredPrompt.prompt();
  const { outcome } = await deferredPrompt.userChoice;
  deferredPrompt = null;
  toast(outcome === 'accepted' ? 'App installed 🎉' : 'Install dismissed');
}
window.addEventListener('load', () => {
  const btn = document.getElementById('installBtn');
  if (btn) btn.onclick = promptInstall;
});
